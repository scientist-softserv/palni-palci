#!/bin/sh

# This script wraps up helm deployment. It is meant as a clear starting point for
# commandline deployment or CI based deployment. It requires the following ENV vars be set
#
# CHART_VERSION: this is the version of the hyrax chart you want to deploy. default - 0.22.0
# DEPLOY_IMAGE: this is the build image that runs the rails application. Typically this would run puma or passenger. eg: samvera/hyrax or ghcr.io/samvera/hyku. Defaults to gcrh.io/samvera/hyku
# WORKER_IMAGE: this is the worker target, usually built from the same Dockerfile as DEPLOY_IMAGE. eg: samvera/hyrax/worker or ghcr.io/samvera/hyku/worker. Defaults to gcrh.io/samvera/hyku/worker
# DEPLOY_TAG: name of of the tag you want to deploy for deploy image. eg: "latest" or "v3.0.1" or "f123asdf1". Defaults to latest
# WORKER_TAG: name of of the tag you want to deploy for deploy image. eg: "latest" or "v3.0.1" or "f123asdf1". Defaults to DEPLOY_TAG
# HELM_EXTRA_ARGS: any additional arguments you'd like passed to helm upgrade directly. can be blank.

if [ -z "$1" ] || [ -z "$2" ]
then
    echo './bin/deploy RELEASE_NAME NAMESPACE'
    exit 1
fi
release_name="${1}"
namespace="${2}"

CHART_VERSION="${CHART_VERSION:-1.3.0}"

DEPLOY_IMAGE="${DEPLOY_IMAGE:-ghcr.io/samvera/hyku}"
WORKER_IMAGE="${WORKER_IMAGE:-ghcr.io/samvera/hyku/worker}"
DEPLOY_TAG="${DEPLOY_TAG:-latest}"

DOLLAR=$ envsubst < ops/gitlab-token.tmpl.yaml > ops/gitlab-token.yaml
kubectl apply -f ops/gitlab-token.yaml


function V() # $1-a $2-op $3-$b
# Compare a and b as version strings. Rules:
# R1: a and b : dot-separated sequence of items. Items are numeric. The last item can optionally end with letters, i.e., 2.5 or 2.5a.
# R2: Zeros are automatically inserted to compare the same number of items, i.e., 1.0 < 1.0.1 means 1.0.0 < 1.0.1 => yes.
# R3: op can be '=' '==' '!=' '<' '<=' '>' '>=' (lexicographic).
# R4: Unrestricted number of digits of any item, i.e., 3.0003 > 3.0000004.
# R5: Unrestricted number of items.
{
  local a=$1 op=$2 b=$3 al=${1##*.} bl=${3##*.}
  while [[ $al =~ ^[[:digit:]] ]]; do al=${al:1}; done
  while [[ $bl =~ ^[[:digit:]] ]]; do bl=${bl:1}; done
  local ai=${a%$al} bi=${b%$bl}

  local ap=${ai//[[:digit:]]} bp=${bi//[[:digit:]]}
  ap=${ap//./.0} bp=${bp//./.0}

  local w=1 fmt=$a.$b x IFS=.
  for x in $fmt; do [ ${#x} -gt $w ] && w=${#x}; done
  fmt=${*//[^.]}; fmt=${fmt//./%${w}s}
  printf -v a $fmt $ai$bp; printf -v a "%s-%${w}s" $a $al
  printf -v b $fmt $bi$ap; printf -v b "%s-%${w}s" $b $bl

  case $op in
    '<='|'>=' ) [ "$a" ${op:0:1} "$b" ] || [ "$a" = "$b" ] ;;
    * )         [ "$a" $op "$b" ] ;;
  esac
}


version=`helm version --template="{{.Version}}"`
V $version '>' 3.6.0
result=$?
if [ 0 -eq $result ]; then
    helm pull --untar oci://ghcr.io/samvera/charts/hyrax --version $CHART_VERSION
else
    helm chart pull ghcr.io/samvera/charts/hyrax:$CHART_VERSION
    helm chart export ghcr.io/samvera/charts/hyrax:$CHART_VERSION
fi

helm repo update

helm upgrade \
    --install \
    --atomic \
    --timeout 15m0s \
    --set image.repository="$DEPLOY_IMAGE" \
    --set image.tag="$DEPLOY_TAG" \
    --set worker.image.repository="$WORKER_IMAGE" \
    --set worker.image.tag="$DEPLOY_TAG" \
    $HELM_EXTRA_ARGS \
    --namespace="$namespace" \
    --create-namespace \
    "$release_name" \
    charts