require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/auth_providers", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # AuthProvider. As you add validations to AuthProvider, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
    provider: 'saml',
    client_id: 'client_id',
    client_secret: 'client_secret',
    idp_sso_service_url: 'idp_sso_service_url'
    }
  end

  let(:invalid_attributes) do
    {
      provider: 'saml',
      client_id: nil,
      client_secret: nil,
      idp_sso_service_url: 'idp_sso_service_url'
    }
  end

  let(:account) { create(:account) }
  let(:admin) { FactoryBot.create(:admin) }

  before do
    WebMock.disable!
    Apartment::Tenant.create(account.tenant)
    Apartment::Tenant.switch(account.tenant) do
      Site.update(account: account)
      login_as(admin)
    end
  end

  after do
    WebMock.enable!
    Apartment::Tenant.drop(account.tenant)
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_auth_provider_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      auth_provider = AuthProvider.create! valid_attributes
      get edit_auth_provider_url(auth_provider)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new AuthProvider" do
        expect {
          post auth_providers_url, params: { auth_provider: valid_attributes }
        }.to change(AuthProvider, :count).by(1)
      end

      it "redirects to the created auth_provider" do
        post auth_providers_url, params: { auth_provider: valid_attributes }
        expect(response).to redirect_to(auth_provider_url(AuthProvider.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new AuthProvider" do
        expect {
          post auth_providers_url, params: { auth_provider: invalid_attributes }
        }.to change(AuthProvider, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post auth_providers_url, params: { auth_provider: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          provider: 'saml',
          client_id: 'client_id_1234',
          client_secret: 'client_secret_1234',
          idp_sso_service_url: 'idp_sso_service_url'
        }
      end

      it "updates the requested auth_provider" do
        auth_provider = AuthProvider.create! valid_attributes
        patch auth_provider_url(auth_provider), params: { auth_provider: new_attributes }
        auth_provider.reload
        expect(auth_provider.client_id).to eq('client_id_1234')
        expect(auth_provider.client_secret).to eq('client_secret_1234')
      end

      it "redirects to the auth_provider" do
        auth_provider = AuthProvider.create! valid_attributes
        patch auth_provider_url(auth_provider), params: { auth_provider: new_attributes }
        auth_provider.reload
        expect(response).to redirect_to(auth_provider_url(auth_provider))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        auth_provider = AuthProvider.create! valid_attributes
        patch auth_provider_url(auth_provider), params: { auth_provider: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested auth_provider" do
      auth_provider = AuthProvider.create! valid_attributes
      expect {
        delete auth_provider_url(auth_provider)
      }.to change(AuthProvider, :count).by(-1)
    end

    it "redirects to the auth_providers list" do
      auth_provider = AuthProvider.create! valid_attributes
      delete auth_provider_url(auth_provider)
      expect(response).to redirect_to(auth_providers_url)
    end
  end
end
